#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim: ts=4 
# vim: expandtab
###
#
# Copyright (c) 2011 David Amián
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors : David Amián <damian@emergya.com>
# 
###
import sys
import getopt
import logging
import os
import subprocess
import dbus
import pwd
import time
import ConfigParser
from pdal import (_, utils,DeviceClass,User)
from pdal.utils import notify

# Add project root directory (enable symlink, and trunk execution).
#PROJECT_ROOT_DIRECTORY = os.path.abspath(
#    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))
#
#if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'pdal'))
#    and PROJECT_ROOT_DIRECTORY not in sys.path):
#    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
#    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses
#



class PdalCore():

    def __init__(self, device_path, device_mode):
        self.device_path = device_path
        self.device_mode = device_mode

    def main(self):
        self.plug()
        if self.device_mode == 'on':
            self.save_properties()
        else: 
            self.remove_tmpfile()

    def remove_tmpfile(self):
        tmp_path = os.path.join('/tmp/.pdal',self.device_path[1:len(self.device_path)])
        if os.path.exists(tmp_path):
            logging.info(_('Cleaning temp file with properties'))
            os.remove(os.path.join(tmp_path,'properties.cfg'))
            os.removedirs(tmp_path)    

    
    def save_properties(self):
        if not os.path.exists('/tmp/.pdal'):
            os.makedirs('/tmp/.pdal')
        tmp_path = os.path.join('/tmp/.pdal',self.device_path[1:len(self.device_path)])
        if os.path.exists(tmp_path):
            logging.info(_('Cleaning temp file with properties'))
            os.remove(os.path.join(tmp_path,'properties.cfg'))
        else:
            os.makedirs(tmp_path)
        logging.info(_('Creating temp file with properties'))
        properties = ConfigParser.ConfigParser()
        properties.add_section('UdevProp')
        properties.set('UdevProp','model',self.dev_model)    
        properties.set('UdevProp','vendor',self.dev_vendor)    
        properties.set('UdevProp','model_id',self.dev_model_id)    
        properties.set('UdevProp','vendor_id',self.dev_vendor_id)    
        properties.set('UdevProp','devname',self.dev_devname)    
        properties.set('UdevProp','sysfspath',self.dev_sysfs_path)    
        properties.set('UdevProp','icon',self.dev_icon)    
        properties.set('UdevProp','formated_name',self.dev_formated_name)    
        properties.set('UdevProp','devices_fs',self.dev_devices_fs)    
        logging.info(_('Saving temp file with properties'))
        with open(os.path.join(tmp_path,'properties.cfg'),'wb') as propertiesfile:
            properties.write(propertiesfile)
        

    def send_notify(self, body, icon):
        if self.device_mode == 'on':
            title = _("New device connected")
        else:
            title = _("Device disconnected")
    
        notify(("PDAL - %s" % title), body, icon)
        

    def get_users_system(self):

        list_users = []
        system_dbus = dbus.SystemBus()
        obj_manager = system_dbus.get_object('org.freedesktop.ConsoleKit','/org/freedesktop/ConsoleKit/Manager')
        session = obj_manager.get_dbus_method('GetSeats', dbus_interface='org.freedesktop.ConsoleKit.Manager')()
        seats = obj_manager.get_dbus_method('GetSeats', dbus_interface='org.freedesktop.ConsoleKit.Manager')()

        for seat in seats:

            obj_seat = system_dbus.get_object('org.freedesktop.ConsoleKit',seat)
            sessions = obj_seat.get_dbus_method('GetSessions', dbus_interface='org.freedesktop.ConsoleKit.Seat')()
            for session in sessions:

                obj_session = system_dbus.get_object('org.freedesktop.ConsoleKit',session)
                display = obj_session.get_dbus_method('GetX11Display',dbus_interface='org.freedesktop.ConsoleKit.Session')()
                user_uid = obj_session.get_dbus_method('GetUnixUser',dbus_interface='org.freedesktop.ConsoleKit.Session')()
                username = pwd.getpwuid(user_uid).pw_name
                home_user = pwd.getpwuid(user_uid).pw_dir
                user = User.User(user_uid, username, display, home_user)
                list_users.append(user)

        return list_users            

    def get_conf_from_udev(self):
        logging.info(_('Reading device %s from udev') % self.device_path)
        device = DeviceClass.DeviceClass(self.device_path)
        self.dev_formated_name = device.get_formated_name()
        self.dev_icon = device.get_icon()
        self.dev_model_id = device.get_model_id()
        self.dev_vendor_id = device.get_vendor_id()
        self.dev_model = device.get_model()
        self.dev_vendor = device.get_vendor()
        self.dev_sysfs_path = device.get_sysfs_path()
        self.dev_devname = device.get_devname()
        self.dev_devices_fs = device.get_devices_fs()
    
    def get_conf_from_tmpfile(self):
        logging.info(_('Reading device %s from tmp file') % self.device_path)
        config = ConfigParser.ConfigParser()
        tmp_path = os.path.join('/tmp/.pdal',self.device_path[1:len(self.device_path)])
        if os.path.exists(os.path.join(tmp_path,'properties.cfg')):
            tmp_file = os.path.join(tmp_path,'properties.cfg')
            config.read(tmp_file)
            self.dev_formated_name = config.get('UdevProp','formated_name')
            self.dev_icon = config.get('UdevProp','icon')
            self.dev_model_id = config.get('UdevProp','model_id')
            self.dev_vendor_id = config.get('UdevProp','vendor_id')
            self.dev_model = config.get('UdevProp','model')
            self.dev_vendor = config.get('UdevProp','vendor')
            self.dev_sysfs_path = config.get('UdevProp','sysfspath')
            self.dev_devname = config.get('UdevProp','devname')
            self.dev_devices_fs = config.get('UdevProp','devices_fs')
        else:
            logging.info(_('The file properites \'%s\' doesn\'t exists') % os.path.join(tmp_path,'properties.cfg'))
            sys.exit()

    def plug(self):
        if self.device_mode == 'off':
            self.get_conf_from_tmpfile()
        else:
            self.get_conf_from_udev()
            

        logging.info(_('Reading device %s') % self.device_path)
        self.override_user = False
        self.filename_script = self.dev_vendor_id+':'+self.dev_model_id+'-'+self.device_mode
        logging.info(_('Looking for user actions'))
        logging.info(_('Connecting to Dbus for search a current user'))
        self.users = '('
        self.displays = '('
        self.users_sys = self.get_users_system()
        for user in self. users_sys:
            if not user.have_display():
                logging.info(_('The user \'%s\' haven\'t a X11 Display') % user.get_username())
                continue
            else:
                self.displays = self.displays+user.get_display()
                self.users = self.users+user.get_username()

                pid=os.fork()
                if pid == 0:
                    os.setuid(user.get_uid())
                    os.putenv('DISPLAY', user.get_display())
                    logging.info(_('Notification of device'))
                    self.send_notify(self.dev_formated_name, self.dev_icon)
                    sys.exit ()

                self.path_user_script = utils.get_script_user_path(user.home)

                if os.path.exists(os.path.join(self.path_user_script,self.filename_script)):
                    self.override_user = True
                    self.execute_script(user.get_username(),os.path.join(self.path_user_script,self.filename_script), user)
                else:
                    logging.info(_('The user '+user.get_username()+' have not a script '+ self.filename_script))
                    continue

        self.displays = self.displays + ')'
        self.users = self.users + ')'
        if not self.override_user:
            logging.info(_('Looking for root actions'))
            if os.path.exists(os.path.join(utils.get_system_user_path(), self.filename_script)):
                self.execute_script('root',os.path.join(utils.get_system_user_path(), self.filename_script))
            else:
                logging.info(_('Does\'t exist %s script in the pdal system path') % self.filename_script)
        
        

    def execute_script(self, username, filename, user=None):
        os.putenv('PDAL_MODEL_ID',self.dev_model_id)
        os.putenv('PDAL_VENDOR_ID',self.dev_vendor_id)
        os.putenv('PDAL_MODEL',self.dev_model)
        os.putenv('PDAL_VENDOR',self.dev_vendor)
        os.putenv('PDAL_SYSFSPATH',self.dev_sysfs_path)
        os.putenv('PDAL_DEVNAME',self.dev_devname)
        devicesfs= '('
        for devfs in self.dev_devices_fs:
            devicesfs = devicesfs + devfs
        devicesfs= ')'
        os.putenv('PDAL_DEVICES_FS', devicesfs)
        logging.info(_('Executing script %s') % filename) 
        if username == 'root':
            os.putenv('PDAL_DISPLAYS', self.displays)
            os.putenv('PDAL_USERS', self.users)
            script = subprocess.Popen(filename)
        
        else:
            os.putenv('DISPLAY',user.get_display())
            os.putenv('USER', username)
            os.setuid(user.get_uid())
            script = subprocess.Popen(filename)
            

def usage():
    logging.info(_("Usage: pdal [-p|--path] [-m|--mode]"))


if __name__ == '__main__':

    argvs = sys.argv[1:]

    logging.basicConfig(filename='/var/log/pdal.log', filemode='a', level=logging.INFO)
    try:
        options, remainder = getopt.gnu_getopt(argvs, 'p:m:', ['path=', 'mode='])

    except getopt.GetoptError:
        usage()
        sys.exit(2)

    if not options:
        usage()
        sys.exit(2)

    optpath = False
    optmode = False
    device_path = None
    device_mode = None

    for opt, arg in options:
        if opt in ('-p', '--path'):
            optpath = True
            device_path = arg


    for opt, arg in options:
        if opt in ('-m', '--mode'):
            optmode = True
            device_mode = arg


    if not optpath :
        logging.info(_("[-p|--path] option is required"))
        usage()
        sys.exit(2)

    if not optmode :
        logging.info(_("[-m|--mode] option is required"))
        usage()
        sys.exit(2)
    logging.info('Started - '+ time.ctime())
    pdal = PdalCore(device_path, device_mode)
    pdal.main()
    logging.info('Finished')
    
